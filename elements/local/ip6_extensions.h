
#ifndef CLICK_IP6_EXTENSIONS_HH
#define CLICK_IP6_EXTENSIONS_HH
#include <click/element.hh>
#include <clicknet/ip6.h>
//# include <net/checksum.h>
//# include <linux/in6.h>

CLICK_DECLS
/**
 * hop-by-hop 0
 * TCP 6
 * UDP 17
 * Ebcapsulated IPv6 Header 41
 * Routing Header 43
 * Fragment Header 44
 * Ressource ReSerVation Protocol 46 //RSVP
 * Encapsulating Security Payload 50
 * Authentication Header 51
 * ICMPv6 58 
 *  No next header 59 // used to close the IP6 packet after the header mentioned this value in its next header field
 * Destination Options Header 60
 * */

//Fixed header part, take a reference to an existing struct click_ip6
/**
 * 
 
struct click_ip6_stable{
	struct{
		unsigned version; //version; 0-3 = 4 bits, half 1st octet/
		uint8_t traf_class; //traffic_class; 4-11 :8 bits, half 1st to half 2nd octet/
		uint32_t flow_label; //flow_label; 12-31 :20 bits, half 2nd, 3rd & 4th octets/
	}ver_traf_flow;
	
	uint16_t payload_len; //4th and 5th octets
	uint8_t next_hdr; // 6th octet
	uint8_t hop_limit; // 7th octet
	
	struct in6_addr ip6_src;	//8-23	 source address
    struct in6_addr ip6_dst;	// 24-39 dest address
}fixed_hdr; */

//Extension header part

struct click_ip6_hop_hop{
		
	uint8_t hop_next_hdr; /** bits:0-7 Next Header */
	uint8_t hop_ext_len; /** bits 8-15 Hdr Ext Len */
	uint16_t hop_options_padd; /** 2-3   bits: 16-31 Options and padding */
	uint32_t hop_options_padding; /** 4-7 Options and padding */	 
	/** 8-11 and 12-15 octets are available for more options and padding possibility: must be in multiple of 8 octets*/
	};// ip6_hop_hdr;

struct click_ip6_destinations{
	
	uint8_t dest_next_hdr; /** bits:0-7 Next Header */
	uint8_t dest_ext_len; /** bits 8-15 Hdr Ext Len */
	uint16_t dest_options_padd; /** 2-3   bits: 16-31 Options and padding */
	uint32_t dest_options_padding; /** 4-7 Options and padding */	 
	/** 8-11 and 12-15 octets are available for more options and padding possibility: must be in multiple of 8 octets*/	
	};;//ip6_dest_hdr;
	
struct click_ip6_routing{
	
	uint8_t next_header; /** oct 0 bits: 0-7 Next header */
	uint8_t hdr_ext_len; /** oct 1 bits: 8-15 Hdr Ext Len */
	uint8_t routing_type; /** oct 2 bits: 16-23 Routing-type */
	uint8_t segment_left; /** oct 3 bits: 24-31 Segments Left */
	uint32_t data; /** oct 4-7 Type-specific Data */
	/** oct 8 -13 optional: more type-specific data */	
	}; //ip6_routing_hdr;

struct click_ip6_fragment_ext {
    uint8_t frag_nxt_hdr; /** oct 0 bits: 0-7 Next header */
    uint8_t frag_reserved; /** oct 1 bits 8-15 Reserved */
    uint16_t frag_offset; /** oct 2-3 */
#define IP6_MF		0x0000 /** 0x0001*/
#define IP6_OFFMASK	0xFFF8							/** bits : 16-28 Fragment Offset */
							/** bits: 29-30 Res*/
							/** bits: 31 M Flag: More fragment */	
	uint32_t frag_id; /** oct 4-7 Identification
		** a nbr generated by the source node is needed for reassemble the original packet*/	
	}; //ip6_fragment_hdr;
	
struct click_ip6_authentication{	
	uint8_t next_header; /** oct 0 bits: 0-7 Next Header */
	uint8_t payload_len; /** oct 1 bits: 8-15 payload len */
	uint16_t reserved; /** oct2-3 bits: 16-31 Reserved */
	uint32_t spi; /** oct 4-7 Security Paramaeters Index */
	uint32_t seq_num; /** oct 8-11 Sequence Number*/
	struct integrity_check_v {
		uint auth_icv [8];
		}integ_check_v; /** Integrity Check Value (ICV)*/	
	}; //ip6_auth_hdr;
	
	
struct click_ip6_encap_sec_payload{
	uint32_t spi; /** Octets 0-3 Security Parameters Index( SPI)*/
	uint32_t seq_num; /**Octets 4-7 Sequence Number*/
	uint8_t payload_data[9]; /**octets 8-12,  Payload data*/
	uint8_t padding[9]; /** octets 13- 21, padding 0-255 octets*/
	uint8_t pad_len; /** octet 22, Pad Length*/ 
	uint8_t next_header; /** octet 23, Next Header */
	uint32_t integrity_check_val[2]; /** octets 24-31, Integrity Check Value(ICV)*/
	}; //ip6_ESP_hdr;
	
#define ip6_hop_code		0X0 // 0
#define ip6_dest_code		0X3C // 60
#define ip6_routing_code		0X2B //43
#define ip6_fragment_code		0X2C //44
#define ip6_auth_code		0X33 // 51
#define ip6_ESP_code		0X32 // 50

//some upper layers protocol

#define IP_PROTO_TCP		0x6 // 6 
#define IP_PROTO_UDP		0x11 //17

CLICK_ENDDECLS
#endif
